---
date: "2023-04-01"
date-modified: last-modified
---

# tidyr: Rectandling {#sec-rectangling}

```{r}
#| label: common.r
#| echo: false
source("_common.R")
```

[This vignette](https://tidyr.tidyverse.org/articles/rectangle.html) discusses the process of rectangling data: taking a deeply nested list (often sourced from wild caught JSON or XML) and taming it into a tidy data set of rows and columns. It uses three main functions:

- `unnest_longer()`: takes each element of a list-column and makes a new row.
- `unnest_wider()`: takes each element of a list-column and makes a new column.
- `hoist()` is similar to `unnest_wider()` but only plucks out selected components and can reach down multiple levels.

A very large number of data rectangling problems can be solved by combining `jsonlite::read_json()` with these functions and a splash of `dplyr`.

The vignette uses the [repurrrsive](https://jennybc.github.io/repurrrsive/) package, which provides a number of deeply nested lists originally mostly captured from web APIs.

```{r}
#| label: setup
#| message: false
library(tidyr)
library(dplyr)
library(repurrrsive)
```

## GitHub users {#sec-gh-users}

Data: `gh_users`

Each user is a named list, where each element represents a column.

```{r}
#| label: gh-users-data
users <- tibble(user = gh_users)
users

# names in list
names(users$user[[1]])
```

`unnest_wider()`: takes every component and makes a new column.

```{r}
#| label: users-wider
users |> unnest_wider(user)
```

`hoist()`: pulls out selected components using the same syntax as `purrr::pluck()`. It moves components out of the inner list into the top-level data frame as columns.

```{r}
#| label: users-hoist
users |> hoist(user, 
  followers = "followers", 
  login = "login", 
  url = "html_url"
)
```

## GitHub repos {#sec-gh-repos}
Data: `gh_repos`

`gh_repos` is a list of repositories that belong to six different users.

```{r}
#| label: gh-repos-data
repos <- tibble(repo = gh_repos)
repos
```

First need to use `unnest_longer()` because the first level of the list is a list of observations.

```{r}
#| label: gh-repos-longer
repos <- repos |> unnest_longer(repo)
repos
```

Then we can use `unnest_wider()` or `hoist()`. This uses `login = c("owner", "login")` to reach two levels deep inside of a list.

```{r}
#| label: gh-repos-wider
repos |> hoist(repo, 
  login = c("owner", "login"), 
  name = "name",
  homepage = "homepage",
  watchers = "watchers_count"
)
```

## Game of Thrones characters {#sec-got}
Data: `got_chars`

`got_chars` has a similar structure to `gh_users`: it is a list of named lists, where each element of the inner list describes some attribute of a GoT character.

```{r}
#| label: got-chars-data
chars <- tibble(char = got_chars)
chars

chars <- chars |> unnest_wider(char)
chars
```

The difference with `gh_users` is that many of the resulting columns are themselves list columns. What you do next is an issue of what you want to do in your analysis.

Maybe you want a row for every book and TV series that the character appears in:

```{r}
#| label: got-appearance
chars |> 
  select(name, books, tvSeries) |> 
  pivot_longer(c(books, tvSeries),
               names_to = "media",
               values_to = "value") |> 
  unnest_longer(value)
```

Maybe you want to build a table that lets you match title to name:

```{r}
#| label: got-title
chars |> 
  select(name, title = titles) |> 
  unnest_longer(title)
```

## Geocoding with Google {#sec-geocode}

Data: `gmaps_cities`

`gmaps_cities` is a tibble with a list column of lists of various depths. To deal with this, you need to alternate between various `unnest_longer()` and `unnest_wider()` or `hoist()` to get at different types of data.

```{r}
#| label: gmaps-data
gmaps_cities
```

json is a list-column of named lists, so it makes sense to start with `unnest_wider()`:

```{r}
#| label: gmaps-wider
gmaps_cities |>
  unnest_wider(json)
```

The `results` column is a list of lists. Most are length 1, but some are length 2, so we need to use `unnest_longer()` to add these observations. These, can then be unnested wider to get at various columns.

```{r}
#| label: gmaps-longer
repurrrsive::gmaps_cities |>
  unnest_wider(json) |> 
  unnest_longer(results) |> 
  unnest_wider(results)
```

To get at lat/lng data we need to go through location:

```{r}
#| label: gmaps-lat-lng
gmaps_cities |>
  unnest_wider(json) |>
  unnest_longer(results) |>
  unnest_wider(results) |>
  unnest_wider(geometry) |>
  unnest_wider(location)
```

Or use `hoist()` to dive deeply to get directly to `lat` and `lng`:

```{r}
#| label: gmaps-hoist
gmaps_cities |>
  hoist(json,
    lat = list("results", 1, "geometry", "location", "lat"),
    lng = list("results", 1, "geometry", "location", "lng")
  )
```

## Sharla Gelfand's discography {#sec-discography}
Data: `discog`

```{r}
#| label: discog-data
discs <- tibble(disc = discog) |> 
  unnest_wider(disc) |> 
  mutate(date_added = as.POSIXct(strptime(date_added, "%Y-%m-%dT%H:%M:%S"))) 
discs
```

Need to drop `id` column because this information is repeated in the `basic_information` list. Can either get rid of `id` or use `hoist()`.

```{r}
#| label: discog-wide
discs |> 
  select(!id) |> 
  unnest_wider(basic_information)

# Or hoist
discs |> 
  hoist(basic_information,
    title = "title",
    year = "year",
    label = list("labels", 1, "name"),
    artist = list("artists", 1, "name")
  )
```
