---
date: "2023-07-03"
date-modified: last-modified
---

# RStudio conf 2022 ggplot2 workshop {#sec-rs22-gd}

Source: [Cédric Scherer, Graphic Design with ggplot2 at RStudio conf 2022](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/). All examples are derived from this workshop.

```{r}
#| label: common.r
#| echo: false
source("_common.R")
```

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(palmerpenguins)
library(ggrepel)
library(ggtext)
library(glue)

# Data
bikes <- readr::read_csv(
  here::here("data", "london-bikes-custom.csv"),
  col_types = "Dcfffilllddddc"
)

bikes$season <- forcats::fct_inorder(bikes$season)
```

## The Grammar of Graphics {#sec-rs22-gd-grammar}

| Component         | Function              | Explanation                                                 |
|-------------------|-----------------------|--------------------------------------|
| Data              | `ggplot(data)`        | The raw data that you want to visualize.                    |
| Aesthetics        | `aes()`               | Aesthetic mappings between variables and visual properties. |
| Geometries        | `geom_*()`            | The geometric shapes representing the data.                 |
| Statistics        | `stat_*()`            | The statistical transformations applied to the data.        |
| Scales            | `scale_*()`           | Maps between the data and the aesthetic dimensions.         |
| Coordinate system | `coord_*()`           | Maps data into the plane of the data rectangle.             |
| Facets            | `facet_*()`           | The arrangement of the data into a grid of plots.           |
| Visual themes     | `theme()`/`theme_*()` | The overall visual defaults of a plot.                      |

## Aesthetic mappings {#sec-rs22-gd-aesthetic-mappings}
- positions: `x, y`
- colors: `color`, `fill`
- shapes: `shape`, `linetype`
- size: `size`
- transparency: `alpha`
- groupings: `group`

### Setting vs Mapping of visual properties {#sec-rs22-gd-setting-mapping}

Aesthetics are **set** within `geom_*()` and are **mapped** within `aes()`. See *line 6* in the examples below. 

::: {layout-ncol="2"}
```{r}
#| label: set-properties
#| code-line-numbers: true
#| fig-height: 3.2
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    color = "#28a87d",
    alpha = .5
  )
```

```{r}
#| label: map-properties
#| code-line-numbers: true
#| fig-height: 3.2
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  )
```
:::

You can map expressions directly within `ggplot2`.

```{r}
#| label: map-expressions
#| fig-height: 3.2
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = temp_feel > 20),
    alpha = .5
  )
```


### Local vs Global encoding {#sec-rs22-gd-local-global}

- **Local encoding**: aesthetic properties only correspond to the specified geom.
- **Global encoding** aesthetic properties correspond to all geoms. This results in adding a `group` aesthetic to geoms such as `geom_smooth()`

::: {layout-ncol="2"}
```{r}
#| label: geom-point-aes-geom
#| fig-height: 3.2
#| message: false
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point(
    aes(color = season),
    alpha = .5
  ) + 
  geom_smooth(method = "lm")
```

```{r}
#| label: geom-point-aes-global
#| fig-height: 3.2
#| message: false
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  ) + 
  geom_smooth(method = "lm")
```
:::

Global encodings are overridden by local encodings. In this case, this leads to a warning message. You can get rid of the warning message by setting a local color, such as `color = "black"`.

```{r}
#| label: global-override
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  ) + 
  geom_smooth(
    aes(group = day_night),
    method = "lm")
```

## Label basics {#sec-rs22-gd-label-basics}

For more detailed info on labels, see @sec-rs22-gd-labels.

**Create base plot**
```{r}
#| label: labels-base-plot
#| code-fold: true
#| output: false
g <-
  ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season,
        group = day_night)
  ) +
  geom_point(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm",
    color = "black"
  )
```

### labs `labs()` {#sec-rs22-gd-labs}
- Aesthetic name-value pairs: `x = "Date"`, `color = "Season"`
- `title`
- `subtitle`
- `caption`: Displayed at the bottom-right of the plot by default.
- `tag`: Displayed at the top-left of the plot by default.
- `alt`: Text used for the generation of alt-text for the plot.

### Specific functions {#sec-rs22-gd-labs-fns}
- `xlab()`
- `ylab()`
- `ggtitle()`

```{r}
#| label: labs
#| message: false
g +
  labs(
    x = "Feels-like temperature (°F)",
    y = "Reported bike shares",
    title = "TfL bike sharing trends",
    subtitle = "Reported bike rents versus feels-like temperature in London",
    caption = "Data: TfL",
    color = "Season:",
    tag = "Fig. 1"
  )
g <- last_plot()
```

## Themes {#sec-rs22-gd-theme}
See [notes on themes](02-themes.qmd) for more information.

### Theme functions {#sec-rs22-gd-theme-fns}
- `theme()`: modify components of a theme.
- `theme_set()`: completely overrides the current theme.
- `theme_update()`: Update individual elements of a plot.

```{r}
#| label: theme
#| message: false

# Set theme for remaining plots 
theme_set(theme_light())

# Update theme
theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  legend.position = "top",
  plot.title.position = "plot"
)

g
```

## Scales {#sec-rs22-gd-scales}

The `scale_*()` components control the properties of all the aesthetic dimensions mapped to the data.

- Positions: `scale_x_*()` and `scale_y_*()`
  - `continuous()`, `discrete()`, `reverse()`, `identity()`, `log10()`, `sqrt()`, `date()`
- Colors: `scale_color_*()` and `scale_fill_*()`
  - `continuous()`, `discrete()`, `manual()`, `identity()`, `gradient()`, `gradient2()`, `brewer()`
- Sizes: `scale_size_*()` and `scale_radius_*()`
  - `continuous()`,` discrete()`, `manual()`, `identity()` `ordinal()`, `area()`, `date()`
- Shapes: `scale_shape_*()` and `scale_linetype_*()`
  - `continuous()`, `discrete()`, `manual()`, `identity()`, `ordinal()`
- Transparency: `scale_alpha_*()`
  - `continuous()`,` discrete()`, `manual()`, `identity()`, `ordinal()`, `date()`

Continuous vs discrete
 
- Continuous: quantitative or numerical data -- can have infinite values within given range.
- Discrete: qualitative or categorical data -- observations can only exist at limited values, often counts.

### Position arguments {#sec-rs22-gd-pos-args}

- `name`: name used for the axis or legend title. If `NULL` the name will be omitted.
- `breaks`: numeric vector or function that takes the limits of the input and returns breaks.
- `labels`: labels used for axis breaks.
- `limits`: numeric vector of length two providing minimum and maximum with `NA` to refer to the existing minimum or maximum. Or a function that accepts the existing (automatic) limits and returns new limits.
  - Setting limits with scales removes data outside of the limits. If you want to zoom, use the `limit` argument in the coordinate system, see @sec-rs22-gd-plot-limits.
- `expand`: Used to add or reduce padding around data along an axis.
  - Use the convenience function `expansion()` to generate the values for the expand argument.
- `na.value`: value used to replace missing values.
- `trans`: A transformation object bundles together a transform, its inverse, and methods for generating breaks and labels.
- `guide`: Specify, add, or remove guides.
- `position`: For position scales, The position of the axis. `left` or `right` for `y` axes, `top` or `bottom` for `x` axes.

```{r}
#| label: scales
g <- ggplot(
    bikes,
    aes(x = date, y = count,
        color = season)
  ) +
  geom_point() +
  scale_y_continuous(
    name = "Reported bike shares",
    breaks = -1:5*15000,
    expand = expansion(add = 2000)
  ) + 
  scale_x_date(
    name = NULL,
    expand = expansion(add = 1),
    date_labels = "%Y/%m/%d"
  )
g
```

### Color scales {#sec-rs22-gd-color-scales}
```{r}
#| label: discrete-colors
g + 
    scale_color_discrete(
    name = "Season:",
    type = c("#69b0d4", "#00CB79", "#F7B01B", "#a78f5f")
  )
```

::: {layout-ncol="2"}
```{r}
#| label: RColorBrewer
#| fig-height: 3.2

# With RColorBrewer
library(RColorBrewer)
g + 
  scale_color_discrete(
    name = "Season:",
    type = brewer.pal(
      n = 4, name = "Dark2"))
```

```{r}
#| label: scale-colorbrewer
#| fig-height: 3.2

# Or with scale_color_brewer
# Also scale_color_viridis_d()
g + 
  scale_color_brewer(
    name = "Season:",
    palette = "Dark2"
    )
```
:::

## Coordinate systems {#sec-rs22-gd-coords}

- linear coordinate systems: preserve the geometrical shapes
  - `coord_cartesian()`
  - `coord_fixed()`
  - `coord_flip()`
- non-linear coordinate systems: likely change the geometrical shapes
  - `coord_polar()`
  - `coord_map()` and `coord_sf()`
  - `coord_trans()`

### Plot limits {#sec-rs22-gd-plot-limits}
You can set plot limits with the coordinate functions. This zooms into the plot instead of removing data that falls outside of those limits as is done with the `scale_*()` functions, see @sec-rs22-gd-pos-args.

::: {layout-ncol="2"}
```{r}
#| label: coord-limit
#| fig-height: 3.2

ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(NA, 15000)
  ) + 
  ggtitle("Zoomed plot")
```

```{r}
#| label: scale-limit
#| fig-height: 3.2
#| warning: false

ggplot(
    bikes,
    aes(x = season, y = count)
  ) +
  geom_boxplot() +
  scale_y_continuous(
    limits = c(NA, 15000)
  ) + 
  ggtitle("Filtered plot")
```
:::

An easy way to remove padding in the plot limits is with `expand = FALSE`. When doing this, you might want to set `clip = "off"` to allow drawing points outside the plot area, so that points are cut in half. Usually you do not want to use `clip = "off"` because this allows plotting anywhere in the plot window.

```{r}
#| label: coord-expand
ggplot(
    bikes,
    aes(x = temp_feel, y = count)
  ) +
  geom_point() +
  coord_cartesian(
    expand = FALSE,
    clip = "off"
  )
```

### Flipped coordinate system {#sec-rs22-gd-coord-flip}
`coord_flip()` is often used with bar plots to make them sideways. This can also be done by placing the variable to be counted on the y axis.

```{r}
#| label: coord-flip
ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(x = fct_infreq(weather_type))
  ) +
  geom_bar() + 
  coord_flip() + 
  labs(x = "Weather type")
```

### Circular coordinate system {#sec-rs22-gd-coord-polar}
Use `coord_polar()` for a circular coordinate system.

```{r}
#| label: coord-polar
ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(x = fct_infreq(weather_type),
        fill = weather_type)
  ) +
  geom_bar(width = 1) +
  coord_polar()
```

Create circular bar plots with `theta = "y"`.

```{r}
#| label: theta
ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(x = fct_infreq(weather_type),
        fill = weather_type)
  ) +
  geom_bar() +
  coord_polar(theta = "y")
```

Create pie chart with `geom_bar(position = "stack")`.

```{r}
#| label: pie-chart
ggplot(
    filter(bikes, !is.na(weather_type)),
    aes(x = 1, fill = fct_rev(
      fct_infreq(weather_type)))
  ) +
  geom_bar(position = "stack") +
  coord_polar(theta = "y") 
```

### Example: lillipop plot {#sec-rs22-gd-lollipop}

```{r}
#| label: lollipop

bikes |> 
group_by(season) |>
  summarize(count = sum(count)) |> 
  ggplot(aes(x = season, y = count)) +
  geom_point(size = 3) + # points at end
  geom_linerange( # lines
    aes(ymin = 0, ymax = count)
  ) + 
  annotate( # create baseline 
  geom = "linerange",
  xmin = .7, xmax = 4.3, y = 0
  ) +
  geom_text( # text labels of seasons
    aes(label = season, y = 0),
    size = 4.5,
    fontface = "bold", hjust = 1.15
  ) +
  coord_polar(theta = "y") + 
  scale_x_discrete( # x-axis is discrete variable
    expand = c(.5, .5) # expand start and end of x-axis
    ) +
  scale_y_continuous(
    # Set higher max limit so summer does not go in circle
    # Can see this value on axis ticks
    limits = c(0, 7.5*10^6)
    ) + 
  theme_void() + 
  # Make plot margin smaller
  theme(plot.margin = margin(rep(-100, 4)))
```

### Transform a coordinate system {#sec-rs22-gd-coord-trans}
`coord_trans()` is different to scale transformations in that it occurs after statistical transformation and will affect the visual appearance of geoms; there is no guarantee that straight lines will continue to be straight.

::: {layout-ncol="2"}
```{r}
#| label: coord-transform
#| message: false
#| fig-height: 3.2

ggplot(
    bikes,
    aes(x = temp, y = count,
        group = day_night)
  ) +
  geom_point() +
  geom_smooth(method = "lm") +
  coord_trans(y = "log10") + 
  ggtitle(
    "Log transform",
    "Linear model lines not straight")
```

```{r}
#| label: scale-transform
#| message: false
#| fig-height: 3.2

ggplot(
    bikes,
    aes(x = temp, y = count,
        group = day_night)
  ) +
  geom_point() +
  geom_smooth(method = "lm") +
  scale_y_log10() + 
  ggtitle(
    "Log scale",
    "Linear model lines are straight")
```
:::

## Labels in plot elements {#sec-rs22-gd-labels}
See @sec-rs22-gd-label-basics for basic discussion of labels.

Create labels with `labs()` as shown in @sec-rs22-gd-label-basics.

```{r}
#| label: labels-baseplot
g <- ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = season)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "Feels Like temperature (°F)",
    y = "Reported bike shares",
    title = "TfL bike sharing trends",
    subtitle = "Reported bike rents versus Feels Like temperature in London",
    caption = "Data: TfL",
    color = "Season:",
    tag = "1."
  )

g
```

### Labels and theme {#sec-rs22-gd-labels-theme}
Change other labels and elements of the plot via `theme()`.

```{r}
#| label: labels-theme
g + theme(
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot",
  axis.text = element_text(
    color = "#28a87d",
    face = "italic",
    colour = NULL,
    size = NULL,
    hjust = 1,
    vjust = 0,
    angle = 45,
    lineheight = 1.3, ## no effect here
    margin = margin(10, 0, 20, 0) ## no effect here
  ),
  plot.tag = element_text(
    margin = margin(0, 12, -8, 0) ## trbl
  )
)
```

### Labels and scales {#sec-rs22-gd-labels-scales}

Different ways to change the labels of the scales using the [scales package](https://scales.r-lib.org) or just the `labels` argument.

```{r}
#| label: labels-scale
g + 
  scale_x_continuous(
  labels = (\(x) paste0(x, "°F")),
  name = "Feels Like Temperature"
  ) + 
  scale_y_continuous(
    breaks = 0:4*15000,
    labels = scales::label_number(
      scale = .001,
      suffix = "k"),
    name = "Reported bike shares in thousands"
    ) + 
  scale_color_discrete(
    name = NULL,
    labels = stringr::str_to_title
  )
```

### Labels and markdown {#sec-rs22-gd-labels-ggtext}
Styling labels with [ggtext](https://wilkelab.org/ggtext) and `element_markdown()`.

```{r}
#| label: ggtext
g +
  ggtitle("<b style='font-size:25pt'>TfL</b> bike sharing trends by <i style='color:#28a87d;'>season</i>") +
  theme(
    plot.title = ggtext::element_markdown()
  )
```

### Labels and facets {#sec-rs22-gd-labels-facets}
```{r}
#| label: labels-facet
codes <- c(
  `TRUE` = "Workday",
  `FALSE` = "Weekend or Holiday"
)

g +
  facet_grid(
    day_night ~ is_workday,
    scales = "free",
    space = "free",
    labeller = labeller(
      day_night = stringr::str_to_title,
      is_workday = codes
    )
  )
```

### Handling long labels {#sec-rs22-gd-labels-long}

**`stringr`**

```{r}
#| label: long-labels-stringr
ggplot(
    bikes,
    aes(x = stringr::str_wrap(weather_type, 6),
        y = count)
  ) +
  geom_boxplot()
```

**`ggtext`**

```{r}
#| label: long-labels-ggtext
g +
  ggtitle("TfL bike sharing trends in 2015 and 2016 by season for day and night periods") +
  theme(
    plot.title = ggtext::element_textbox_simple(
      margin = margin(t = 12, b = 12),
      padding = margin(rep(12, 4)),
      fill = "grey90",
      box.color = "grey40",
      r = unit(9, "pt"),
      halign = .5,
      face = "bold",
      lineheight = .9
    ),
    plot.title.position = "plot"
  )
```

## Annotations {#sec-rs22-gd-annotations}

### Annotation basics {#sec-rs22-gd-annotation-basics}
Add annotations with `annotate()` and selecting the `geom` used for the annotation.

```{r}
#| label: single-text-ann
ggplot(bikes, aes(humidity, temp)) +
  geom_point(size = 2, color = "grey") +
  annotate(
    geom = "text",
    x = 90,
    y = 27.5,
    label = "Some\nadditional\ntext",
    size = 6,
    color = "firebrick",
    fontface = "bold",
    lineheight = .9
  )
```

To add multiple text annotations use vectors for aspects you want to be different.

```{r}
#| label: multi-text-ann
ggplot(bikes, aes(humidity, temp)) +
  geom_point(size = 2, color = "grey") +
  annotate(
    geom = "text",
    x = c(90, 50),
    y = c(27.5, 3.5),
    label = c("Text A", "Text B"),
    color = c("black", "firebrick"),
    size = c(5, 10),
    fontface = c("plain", "bold")
  )
```

Add boxes

```{r}
#| label: box-ann
ggplot(bikes, aes(humidity, temp)) +
  annotate(
    geom = "rect",
    xmin = -Inf,
    xmax = 60,
    ymin = 20,
    ymax = Inf,
    fill = "#663399"
  ) +
  geom_point(size = 2, color = "grey")
```

### Highlighting aspects with annotations {#sec-rs22-gd-annotation-hl}

Adding a straight line or a curved line between annotated text and aspects of the plot you want to highlight. See `geom_segment()` and `geom_curve()` for arguments to use in `annotate()`, particularly in working with curvature. 

::: {layout-ncol="2"}
```{r}
#| label: line-ann
#| fig-height: 3.2
ggplot(bikes, aes(humidity, temp)) +
  geom_point(size = 2, color = "grey") +
  annotate(
    geom = "text",
    x = 90,
    y = 27.5,
    label = "Some\nadditional\ntext",
    size = 6,
    lineheight = .9
  ) +
  annotate(
    geom = "segment",
    x = 90, xend = 82,
    y = 25, yend = 18.5
  )
```

```{r}
#| label: curve-ann
ggplot(bikes, aes(humidity, temp)) +
  geom_point(size = 2, color = "grey") +
  annotate(
    geom = "text",
    x = 90,
    y = 27.5,
    label = "Some\nadditional\ntext",
    size = 6,
    lineheight = .9
  ) +
  annotate(
    geom = "curve",
    x = 90, xend = 82,
    y = 25, yend = 18.5
  )
```
:::

Working with curved line annotations and adding arrows.

```{r}
#| label: curve-arrows
ggplot(bikes, aes(humidity, temp)) +
  geom_point(size = 2, color = "grey") +
  annotate(
    geom = "text",
    x = 90,
    y = 27.5,
    label = "Some\nadditional\ntext",
    size = 6,
    lineheight = .9
  ) +
  annotate(
    geom = "curve",
    x = 94, xend = 82,
    y = 26, yend = 18.5,
    curvature = -.8,
    angle = 140,
    arrow = arrow(
      length = unit(10, "pt"),
      type = "closed"
    )
  )
```

### Annotations with geoms {#sec-rs22-gd-annotation-geoms}

You can highlight specific points on a plot by giving them different aesthetics, for instance, highlighting hot periods by using filtered data for highlighted points in a second `geom_point()` function.

```{r}
#| label: hot-periods
ggplot(
    filter(bikes, temp >= 27),
    aes(x = humidity, y = temp)
  ) +
  geom_point(
    data = bikes,
    color = "grey65", alpha = .3
  ) +
  geom_point(size = 2.5)
```

### Text annotations {#sec-rs22-gd-text-annotations}
You can use `geom_text()` and `geom_label()` to label points, but `ggrepel` helps to make these annotations clearer.

```{r}
#| label: ggrepel
ggplot(
    filter(bikes, temp >= 27),
    aes(x = humidity, y = temp)
  ) +
  geom_point(
    data = bikes,
    color = "grey65", alpha = .3
  ) +
  geom_point(size = 2.5) +
  ggrepel::geom_text_repel(
    aes(label = season)
  )
```

Highlight an outlier by changing color of the point and the text annotation. Here, a color aspect is added by creating a `TRUE`/`FALSE` statement within `aes()`. Because this is done in the global `ggplot()` encoding, it is used by the outlier points and the text annotation. The rest of the points use the local encoding provided by the first `geom_point()`.

```{r}
#| label: ggrepel-color
ggplot(
    filter(bikes, temp >= 27),
    aes(x = humidity, y = temp,
        # Create TRUE/FALSE for color
        color = season == "summer")
  ) +
  geom_point(
    data = bikes,
    color = "grey65", alpha = .3
  ) +
  geom_point(size = 2.5) +
  ggrepel::geom_text_repel(
    aes(label = str_to_title(season))
  ) +
  scale_color_manual(
    values = c("firebrick", "black"),
    guide = "none" # no legend
  )
```

With `ggrepel` you can force text annotations into a certain area of the plot with `xlim` and `ylim`. You can also style the line segments.

```{r}
#| label: ggrepel-segments
ggplot(
    filter(bikes, temp >= 27),
    aes(x = humidity, y = temp,
        color = season == "summer")
  ) +
  geom_point(
    data = bikes,
    color = "grey65", alpha = .3
  ) +
  geom_point(size = 2.5) +
  ggrepel::geom_text_repel(
    aes(label = str_to_title(season)),
    ## force to the left of plot
    xlim = c(NA, 35),
    ## style segment
    segment.curvature = .01,
    arrow = arrow(length = unit(.02, "npc"), type = "closed")
  ) +
  scale_color_manual(
    values = c("firebrick", "black"),
    guide = "none"
  ) +
  xlim(25, NA) # Expand x min to give space for annotations
```

### Annotations with `ggforce` {#sec-rs22-gd-ggforce}

Use of [ggforce](https://ggforce.data-imaginist.com) to highlight aspects of a plot.

`geom_mark_rect()` draws a rectangle around a set of points. The geom provides many arguments that can be used to alter the look of the rectangles and labels for the rectangles.

```{r}
#| label: ggforce-mark-rect
ggplot(
    filter(bikes, temp > 20 & season != "summer"),
    aes(x = humidity, y = temp,
        color = season)
  ) +
  geom_point(
    data = bikes,
    color = "grey65", alpha = .3
  ) +
  geom_point() +
  ggforce::geom_mark_rect(
    aes(label = str_to_title(season)),
    label.fill = "transparent"
  ) +
  scale_color_brewer(
    palette = "Dark2",
    guide = "none"
  ) + 
  ylim(NA, 35) # Give room above for annotations
```

`geom_mark_hull()` creates a hull around the points. Notice the use of `description` in `aes()` to provide addition information to the label.

```{r}
#| label: ggforce-mark-hull
ggplot(
    bikes,
    aes(x = humidity, y = temp,
        color = season == "summer")
  ) +
  geom_point(alpha = .4) +
  ggforce::geom_mark_hull(
    aes(label = str_to_title(season),
        filter = season == "summer",
        description = "June to August"),
    label.fill = "transparent",
    expand = unit(10, "pt")
  ) +
  scale_color_manual(
    values = c("grey65", "firebrick"),
    guide = "none"
  )
```

### Annotations example: Palmer penguins {#sec-rs22-gd-annotations-ex}

See also Cédric's [The Evolution of a ggplot](https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot/) for another example of building a similar plot.

```{r}
#| label: example-annotations
#| warning: false
#| message: false
#| fig-width: 8
#| fig-height: 4

# Summary data for annotations
penguins_labs <- penguins |> 
  group_by(species) |> 
  summarize(across(starts_with("bill"), ~ mean(.x, na.rm = TRUE))) |> 
  mutate(
    species_lab = case_when(
      species == "Adelie" ~ "<b style='font-size:15pt;'>*P. adéliae*</b><br>(Adélie penguin)",
      species == "Chinstrap" ~ "<b style='font-size:15pt;'>*P. antarctica*</b><br>(Chinstrap penguin)",
      species == "Gentoo" ~ "<b style='font-size:15pt;'>*P. papua*</b><br>(Gentoo penguin)"
    )
  )

ggplot(
  penguins,
  aes(x = bill_length_mm, y = bill_depth_mm,
      color = species, size = body_mass_g)
  ) + 
  geom_point(alpha = 0.2, stroke = 0.3) + 
  # Add solid outline to points
  geom_point(shape = 1, stroke = 0.3) + 
  # Color scale and legend title
  scale_color_manual(
    guide = "none",
    values = c("#FF8C00", "#A034F0", "#159090")
  ) + 
  # Style size legend
  scale_size(
    name = "Body mass:",
    breaks = 3:6 * 1000,
    labels = (\(x) paste0(x / 1000, "kg")),
    range = c(0.5, 5)
  ) + 
  geom_richtext(
    data = penguins_labs,
    aes(label = species_lab,
        color = species,
        color = after_scale(colorspace::darken(color, .4))),
    size = 3, lineheight = 0.8,
    fill = "#ffffffab", ## hex-alpha code
    show.legend = FALSE
  ) + 
  # Adjust axes
  scale_x_continuous(
   limits = c(30, 60),
   breaks = 6:12*5,
   expand = c(0, 0)
  ) + 
  scale_y_continuous(
    limits = c(12.5, 22.5),
    breaks = seq(12.5, 22.5, by = 2.5),
    expand = c(0, 0)
  ) + 
  coord_cartesian(
    expand = FALSE,
    clip = "off",
  ) + 
  labs(
    x = "Bill length *(mm)*",
    y = "Bill depth *(mm)*",
    title = "Bill dimensions of brush-tailed penguins *Pygoscelis spec.*",
    caption = "Horst AM, Hill AP, Gorman KB (2020). palmerpenguins R package version 0.1.0"
    ) + 
  theme_minimal(base_size = 10) + 
  theme(
    plot.title.position = "plot",
    plot.caption.position = "plot",
    panel.grid.minor = element_blank(),
    plot.title = element_markdown(
      face = "bold", size = 16, margin = margin(12, 0, 12, 0)
    ),
    plot.caption = element_markdown(
      size = 7, color = "grey50", margin = margin(12, 0, 6, 0)
    ),
    axis.title.x = element_markdown(margin = margin(t = 8)),
    axis.title.y = element_markdown(margin = margin(r = 8)),
    legend.text = element_text(color = "grey50"),
    plot.margin = margin(0, 14, 0, 12),
    plot.background = element_rect(fill = NA, color = "grey50", linewidth = 1)
)
```

## Adding Images {#sec-rs22-gd-images}

Load the image

```{r}
#| label: load-image
url <- "https://d33wubrfki0l68.cloudfront.net/dbb07b06a7b3fe056db386fef0b158cc2fd33cb9/8b491/assets/img/2022conf/logo-rstudio-conf.png"
img <- magick::image_read(url)
img <- magick::image_negate(img)
```

Add background image to a plot using `grid::rasterGrob()`.

```{r}
#| label: background-image
ggplot(bikes, aes(date, temp_feel)) +
  annotation_custom(
    grid::rasterGrob(
      image = img
    )
  ) +
  geom_point(color = "#71a5d4")
```

Adjust the position of the image using ratios from the plot.

```{r}
#| label: image-position
ggplot(bikes, aes(date, temp_feel)) +
  annotation_custom(
    grid::rasterGrob(
      image = img,
      x = .5,
      y = .9,
      width = .9
    )
  ) +
  geom_point(color = "#71a5d4") +
  ylim(NA, 37)
```

Place image outside of the plot areas using `y > 1` and adding to `plot.margin`.

```{r}
#| label: image-outside-plot
ggplot(bikes, aes(date, temp_feel)) +
  annotation_custom(
    grid::rasterGrob(
      image = img,
      x = .47,
      y = 1.15,
      width = .9
    )
  ) +
  geom_point(color = "#71a5d4") +
  coord_cartesian(clip = "off") +
  theme(
    plot.margin = margin(90, 10, 10, 10)
  )
```


## Color {#sec-rs22-gd-color}

### Predefined color palettes {#sec-rs22-gd-color-pals}

::: {layout-ncol="2"}
```{r}
#| label: viridis-palette
ggplot(
    bikes, 
    aes(x = day_night, y = count, 
        fill = season)
  ) +
  geom_boxplot() +
  scale_fill_viridis_d(
    option = "plasma",
    begin = 0.3
  ) + 
  ggtitle("Viridis")
```

```{r}
#| label: brewer-palette
ggplot(
    bikes, 
    aes(x = day_night, y = count, 
        fill = season)
  ) +
  geom_boxplot() +
  scale_fill_brewer(
    palette = "Set1",
    direction = -1
  ) + 
  ggtitle("Brewer")
```
:::

### Color palette packages {#sec-rs22-gd-color-pkgs}
- [rcartocolor](https://jakubnowosad.com/rcartocolor/)
- [scico](https://github.com/thomasp85/scico)
- [ggsci](https://nanx.me/ggsci/)
- [ggthemes](https://jrnold.github.io/ggthemes/)
- [nord](https://cran.r-project.org/web/packages/nord/index.html)
- [MetBrewer](https://cran.r-project.org/web/packages/MetBrewer/index.html)

### Customizing existing palettes {#sec-rs22-gd-color-custom-pals}

Choose specific colors from a discrete color palette.

```{r}
#| label: carto-custom
carto_custom <- 
  rcartocolor::carto_pal(
    name = "Vivid", n = 6
  )[c(1, 3:5)]

ggplot(
    bikes, 
    aes(x = day_night, y = count, 
        fill = season)
  ) +
  geom_boxplot() +
  scale_fill_manual(
    values = carto_custom
  )
```

Lighten or darken the color palette with [colorspace](https://colorspace.R-Forge.R-project.org/).

This can be done by lightening the palette and placing it in `scale_fill_manual()`.

```{r}
#| label: lighten-colors-1
carto_light <- colorspace::lighten(carto_custom, 0.8)

ggplot(
    bikes, 
    aes(x = day_night, y = count, 
        fill = season)
  ) +
  geom_boxplot() +
  scale_fill_manual(
    values = carto_light
  )
```

Or you can do the lightening within `aes()` using `stage()`.

```{r}
#| label: lighten-colors-2
ggplot(
    bikes, 
    aes(x = day_night, y = count)
  ) +
  geom_boxplot(
    aes(
      fill = stage(
        season,
        after_scale = colorspace::lighten(fill, 0.8)
      )
    )
  ) +
  scale_fill_manual(
    values = carto_custom
  )
```

This latter approach is a good way to apply a color palette to two different aspects of a geom such as `color` and `fill`, though you do not need to use `stage()` in this case.

```{r}
#| label: lighten-colors-3
ggplot(
    bikes, 
    aes(x = day_night, y = count)
  ) +
  geom_boxplot(
    aes(color = season,
        fill = after_scale(
          colorspace::lighten(color, 0.8))
        )
  ) +
  scale_color_manual(
    values = carto_custom
  )
```

The approach also makes it possible to both lighten and darken palettes for different geoms. For instance, adding points to a boxplot with a darker palette.

```{r}
#| label: lighten-colors-4
#| warning: false
ggplot(
    bikes, 
    aes(x = day_night, y = count)
  ) +
  geom_boxplot(
    aes(color = season,
        fill = after_scale(
          colorspace::lighten(color, 0.8)
        ))
  ) +
  geom_jitter(
    aes(color = season,
        color = after_scale(
          colorspace::darken(color, 0.3))
        ), 
    position = position_jitterdodge(
      dodge.width = 0.75, 
      jitter.width = 0.2),
    alpha = 0.4
  ) +
  scale_color_manual(
    values = carto_custom
  )
```

### Gradient palettes {#sec-rs22-gd-gradient-pals}

#### Sequential palettes: `scale_color_gradient()`

```{r}
#| label: sequential-palettes
ggplot(
    bikes, 
    aes(x = temp_feel, y = count, 
        color = temp_feel)
  ) +
  geom_point() +
  scale_color_gradient(
    low = "#28A87D",
    high = "#FFD166"
  )
```

#### Diverging palettes: `scale_color_gradient2()`

```{r}
#| label: diverging-palettes
ggplot(
    bikes, 
    aes(x = temp_feel, y = count, 
        color = temp_feel)
  ) +
  geom_point() +
  scale_color_gradient2(
    low = "#663399",
    high = "#993334",
    mid = "grey92",
    midpoint = 10,
    limits = c(-10, 30)   
  )
```

#### Multi-colored sequential palettes: `scale_color_gradientn()`

```{r}
#| label: multi-color-palettes
ggplot(
    bikes, 
    aes(x = temp_feel, y = count, 
        color = temp_feel)
  ) +
  geom_point() +
  scale_color_gradientn(
    colors = carto_custom,
    values = c(0, .2, .8, 1)
  )
```

### Build your own palettes: discrete palette {#sec-rs22-gd-color-pal-discrete}

1. Create a function that accesses a named vector of colors as hex values.

```{r}
#| label: dubois-colors
dubois_colors <- function(...) {
  dubois_cols <- c(
    `black`    = "#000000",
    `purple`   = "#582f6c",
    `violet`   = "#94679C",
    `pink`     = "#ef849f",
    `softred`  = "#f4b7a7",
    `iceblue`  = "#bccbf3",
    `palegrey` = "#e4e4e4"
  )

  cols <- c(...)

  if (is.null(cols))
    return (dubois_cols)

  dubois_cols[cols]
}

dubois_colors("black", "pink", "softred", "iceblue")
```

2. Create a function to return `n` color values from discrete palette.

```{r}
#| label: dubois-pal-d
dubois_pal_d <- function(palette = "default", reverse = FALSE) {
  function(n) {
    if(n > 5) stop('Palettes only contains 5 colors')

    if (palette == "default") { pal <- dubois_colors(
      "black", "violet", "softred", "iceblue", "palegrey")[1:n] }
    if (palette == "dark") { pal <- dubois_colors(1:5)[1:n] }
    if (palette == "light") { pal <- dubois_colors(3:7)[1:n] }
    
    pal <- unname(pal)

    if (reverse) rev(pal) else pal
  }
}

dubois_pal_d()(3)
```

3. Create scale discrete color and fill functions to work with ggplot.

```{r}
#| label: scale-d-dubois
scale_color_dubois_d <- function(palette = "default", reverse = FALSE, ...) {
  if (!palette %in% c("default", "dark", "light"))
    stop('Palette should be "default", "dark" or "light".')

  pal <- dubois_pal_d(palette = palette, reverse = reverse)

  ggplot2::discrete_scale("colour", paste0("dubois_", palette), palette = pal, ...)
}

scale_fill_dubois_d <- function(palette = "default", reverse = FALSE, ...) {
  if (!palette %in% c("default", "dark", "light"))
    stop('Palette should be "default", "dark" or "light".')

  pal <- dubois_pal_d(palette = palette, reverse = reverse)

  ggplot2::discrete_scale("fill", paste0("dubois_", palette), palette = pal, ...)
}
```

4. Use discrete palette scale function

```{r}
#| label: scale-d-dubois-plot
ggplot(
    bikes, 
    aes(x = day_night, y = count, 
        fill = season)
  ) +
  geom_boxplot() +
  scale_fill_dubois_d(palette = "light")
```

### Build your own palettes: continuous palette {#sec-rs22-gd-color-pal-cont}

Use named color palette from above

2. Create function that builds light and dark palettes and uses `colorRampPalette()` to create continuous palette.

```{r}
#| label: dubois-pal-c
dubois_pal_c <- function(palette = "dark", reverse = FALSE, ...) {
  dubois_palettes <- list(
    `dark`    = dubois_colors("black", "purple", "violet", "pink"),
    `light`   = dubois_colors("purple", "violet", "pink", "palered")
  )

  pal <- dubois_palettes[[palette]]
  pal <- unname(pal)

  if (reverse) pal <- rev(pal)

  grDevices::colorRampPalette(pal, ...)
}

dubois_pal_c(palette = "light", reverse = TRUE)(3)
```

3. Create scale continuous color and fill functions to work with ggplot.

```{r}
#| label: scale-c-dubois
scale_fill_dubois_c <- function(palette = "dark", reverse = FALSE, ...) {
  if (!palette %in% c("dark", "light")) stop('Palette should be "dark" or "light".')

  pal <- dubois_pal_c(palette = palette, reverse = reverse)

  ggplot2::scale_fill_gradientn(colours = pal(256), ...)
}

scale_color_dubois_c <- function(palette = "dark", reverse = FALSE, ...) {
  if (!palette %in% c("dark", "light")) stop('Palette should be "dark" or "light".')

  pal <- dubois_pal_c(palette = palette, reverse = reverse)

  ggplot2::scale_color_gradientn(colours = pal(256), ...)
}
```

4. Use continuous palette scale function

```{r}
#| label: scale-c-dubois-plot
ggplot(
    bikes, 
    aes(x = temp_feel, y = count, 
        color = temp_feel)
  ) +
  geom_point() +
  scale_color_dubois_c(
    palette = "light",
    reverse = TRUE
  )
```


## Legend placement and styling {#sec-rs22-gd-legend}

**Guides** are the collective name for axes and legends. Legend position is set within `theme()`, while many aspects of the styling of the legend can be set within `guide` argument of `scale_*()` functions. See `guides()` function for details.

Removing a legend from a plot:

1. `geom_*(show.legend = FALSE)`
2. `scale_*(guide = "none")`
3. `guides(color = "none")`: setting aesthetic to "none"
4. `theme(legend.position = "none")`

There are three types of quantitative guides:

- `guide_bins()`
- `guide_colourbar()`
- `guide_coloursteps()`

### Legend position {#sec-rs22-gd-legend-pos}
```{r}
#| label: legend-position
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = humidity)
  ) +
  geom_point() +
  scale_color_viridis_b(
    # Styling of legend with guide
    guide = guide_colorsteps(
      title.position = "top",
      title.hjust = 0.5, # center title
      show.limits = TRUE, # labels for low and high values
      frame.colour = "black",
      frame.linewidth = 1,
      barwidth = unit(8, "lines") # width of whole colorbar
    )
  ) +
  theme(
    # Legend position and direction
    legend.position = c(.25, .85),
    legend.direction = "horizontal"
  )
```

Create a colorbar at the top of the plot that spans most of the plot.

```{r}
#| label: legend-colorbar
ggplot(
    bikes,
    aes(x = temp_feel, y = count,
        color = humidity)
  ) +
  geom_point() +
  scale_color_viridis_c(
    breaks = 3:10*10,
    limits = c(30, 100),
    name = "Humidity",
    guide = guide_colorbar(
      title.position = "top",
      title.hjust = 0,
      ticks = FALSE,
      # set width of colorbar
      barwidth = unit(20, "lines"),
      barheight = unit(0.6, "lines")
    )
  ) +
  theme(
    legend.position = "top"
  )
```

### Legend and color example: color shading {#sec-rs22-gd-legend-ex}

Create a legend that uses color shading, taking a palette and using lighter and darker shades to show similarity between groups.

```{r}
#| label: shaded-legend

# Create palette
pal <- c("#3c89d9", "#1ec99b", "#F7B01B", "#a26e7c")
shades <- c(colorspace::lighten(pal, .3),
            colorspace::darken(pal, .3))

bikes |> 
  arrange(day_night, date) |> 
  # Create factor column with season and day/night data
  mutate(
    season_day = paste(
      str_to_title(season), day_night
    ),
    season_day = forcats::fct_inorder(season_day)
  ) |> 
  ggplot(
    aes(x = season, y = count,
        fill = season_day)
  ) +
  stat_summary(
    geom = "col", fun = sum,
    position = position_dodge2(
      width = .2, padding = .1
    )
  ) + 
  scale_fill_manual(
    values = shades, name = NULL # No name for fill legend
  ) +
  scale_x_discrete(
    labels = str_to_title # Capitalize labels
  ) +
  scale_y_continuous(
    labels = scales::label_comma(),
    expand = c(0, 0),
    limits = c(NA, 4500000)
  ) +
  labs(x = NULL, y = "Reported bike shares") + 
  # Order of legend by row to align seasons
  guides(fill = guide_legend(byrow = TRUE)) + 
  theme(
    panel.grid.major.x = element_blank(),
    axis.title = element_blank()
  )
```
