---
date: "2023-03-14"
date-modified: last-modified
---

# dplyr: Row-wise operations {#sec-rowwise}

```{r}
#| label: common.r
#| echo: false
source("_common.R")
```

```{r}
#| label: setup
#| message: false
library(dplyr)
```

This vignette centers on the use of `rowwise()`, which was introduced in 2020 with `dplyr 1.0.0`. See [dplyr 1.0.0 notes](01-dplyr-1.0.0.qmd#sec-rowwise).

## Creating {#sec-creating}

`rowwise()` works like `group_by()` in the sense that it doesnâ€™t change what the data looks like; it changes how dplyr verbs operate on the data. `rowwise()` switches the orientation of `dplyr` verbs on data frames to work across rows instead of down columns.

```{r}
#| label: rowwise-vs-normal
df <- tibble(x = 1:2, y = 3:4, z = 5:6)

# Normal
df %>% mutate(m = mean(c(x, y, z)))

# rowwise
df %>% rowwise() %>% mutate(m = mean(c(x, y, z)))
```

You can supply **"identifier"** variables in `rowwise()`. These variables are preserved when you call `summarise()` and so function similarly to variables in `group_by()`. You can remove the grouping with `ungroup()` or `.groups`.

```{r}
#| label: identifier-vars
df <- tibble(name = c("Mara", "Hadley"), x = 1:2, y = 3:4, z = 5:6)

df %>% 
  rowwise() %>% 
  summarise(m = mean(c(x, y, z)))

df %>% 
  rowwise(name) %>% 
  summarise(m = mean(c(x, y, z)), .groups = "drop")
```


## Per row summary statistics {#sec-per-row}
Use `mutate()` to add a new column to each row; use `summarise()` to return just the summary column(s) and any "identifier" columns.

Data that might represent scores for students on tests:

```{r}
#| label: data
df <- tibble(id = 1:6, w = 10:15, x = 20:25, y = 30:35, z = 40:45)
```

Sum of total scores as a new column with `mutate()` or on its own with `summarise()`:

```{r}
#| label: sum-scores
# mutate
df %>% 
  rowwise() %>% 
  mutate(total = sum(c(w, x, y, z)))

# summarise
df %>% 
  rowwise() %>% 
  summarise(total = sum(c(w, x, y, z)), .groups = "drop")
```

You can use `c_across()` to access tidy selection syntax and "identifier" columns are not used within computations.

```{r}
#| label: c_across
df %>% 
  rowwise(id) %>% 
  mutate(total = sum(c_across(w:z)))

df %>% 
  rowwise(id) %>% 
  mutate(total = sum(c_across(where(is.numeric))))
```

You can combine rowwise analysis with column-wise analysis such as computing the proportion of the total for each column.

```{r}
#| label: proportion

df %>% 
  rowwise(id) %>% 
  mutate(total = sum(c_across(w:z))) %>% 
  ungroup() %>% 
  mutate(across(w:z, \(x) x / total))
```


## List-columns {#sec-list-cols}
`rowwise()` pairs well with list columns and helps to avoid for loops, use of the `apply()` functions, or `purr::map()` functions. If you want to get the length of list columns you either have to use the rather esoteric `lengths()` function or `apply()` or `map()` functions. But you can now do this with `rowwise()`.

```{r}
#| label: list-columns
df <- tibble(x = list(1, 2:3, 4:6))

# Base apply
df %>% mutate(l = sapply(x, length))

# purrr::map
df %>% mutate(l = purrr::map_int(x, length))

# rowwise
df %>% 
  rowwise() %>% 
  mutate(l = length(x))

```

### Subsetting list-columns
List-columns provide a good way to understand how grouping with `rowwise()` works differently from grouping with `group_by()` even when each group happens to have only one row. In `rowwise()` each group always only has one row.

```{r}
#| label: grouping-data
df <- tibble(g = 1:2, y = list(1:3, "a"))
gf <- df %>% group_by(g)
rf <- df %>% rowwise(g)

# group_by
gf %>% mutate(type = typeof(y), length = length(y))

# rowwise
rf %>% mutate(type = typeof(y), length = length(y))
```

`mutate()` slices that data to pass to `length(y)` with `[` in the grouped data frame but uses `[[` subsetting for row-wise mutates.

### Modelling
`rowwise()` and list-columns provides a variety of solutions to modelling problems. You can create a nested data frame that is more explicit than `group_by()` and returns a `rowwise` data frame.

```{r}
#| label: nest_by
by_cyl <- mtcars %>% nest_by(cyl)
by_cyl
```

Now we can make one model per row and one set of predictions per row:

```{r}
#| label: model-per-row
mods <- by_cyl %>% 
  mutate(mod = list(lm(mpg ~ wt, data = data))) %>% 
  mutate(pred = list(predict(mod, data)))
mods
```

You can then summarize the model in a variety of ways or access the parameters of each model:

```{r}
#| label: model-summary
# Summary
mods %>% summarise(rsq = summary(mod)$r.squared)

# Access parameters
mods %>% reframe(broom::tidy(mod))
```


## Repeated function calls {#sec-repeated-funcs}

`rowwise()` can also return a vector of length greater than one if the result is a list. This means that `rowwise()` and mutate() provide an elegant way to call a function many times with varying arguments, storing the outputs alongside the inputs. For instance you can store argument parameters for `runif()` in a data frame and then have the results presented in a list column.

```{r}
#| label: simulations
df <- tribble(
  ~ n, ~ min, ~ max,
    1,     0,     1,
    2,    10,   100,
    3,   100,  1000,
)

df %>% 
  rowwise() %>% 
  mutate(data = list(runif(n, min, max)))
```

You can also vary the functions called with the use of `do.call()`.

```{r}
#| label: do.call
df <- tribble(
   ~rng,     ~params,
   "runif",  list(n = 10), 
   "rnorm",  list(n = 20),
   "rpois",  list(n = 10, lambda = 5),
) %>%
  rowwise()

df %>% 
  mutate(data = list(do.call(rng, params)))
```
