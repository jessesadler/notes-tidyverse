---
date: "2023-07-13"
date-modified: last-modified
---

# Coordinates {#sec-coords}

```{r}
#| label: common.r
#| echo: false
source("_common.R")
```

Coordinate systems define how `x` and `y` are related to each other to produce a 2d plot. The coordinate system, thus, is in charge of drawing the axes and panel backgrounds. "While the scales control the values that appear on the axes, and how they map from data to position, it is the coordinate system which actually draws them." (Wickham, ggplot2 Book: Ch 15) Therefore, coordinate systems are closely related to positional scales, and the topics discussed here are also explained in the notes on [scales](02-scales.qmd#sec-scale-limits).

## Resources {#sec-coords-resources}

- [Coordinates documentation](https://ggplot2.tidyverse.org/reference/index.html#coordinate-systems)
- [Wickham, ggplot2 Book: Coordinates](https://ggplot2-book.org/coord.html)

```{r}
#| label: setup
#| message: false
library(ggplot2)
library(dplyr)
library(readr)
library(palmerpenguins)

# Data
penguins <- penguins |> 
  filter(!is.na(flipper_length_mm),
         !is.na(sex))

bikes <- read_csv(
  here::here("data", "london-bikes-custom.csv"),
  col_types = "Dcfffilllddddc"
)

bikes$season <- forcats::fct_inorder(bikes$season)
```

## Plot limits {#sec-coords-limits}
See @sec-scale-limits for more on the differences of using `scale_x/y_*()` or `coord_cartesian()` to set plot limits.

### Zooming {#sec-coords-zoom}
Use `coord_cartesian(xlim, ylim)` to zoom in on a plot.

For zooming in on data in a plot, making the axes limits smaller than the data, it is preferable to use `coord_cartesian()` instead of `scale_x/y_*()`, which subsets the data, turning all of the data outside the limits into `NA`.

::: {layout-ncol="2"}
```{r}
#| label: coords-zoom
# Zoomed plot
penguins |> 
ggplot(aes(x = species,
           y = body_mass_g)) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(3500, 5500))
```

```{r}
#| label: scales-zoom
#| warning: false
# Filtered plot
penguins |> 
ggplot(aes(x = species,
           y = body_mass_g)) +
  geom_boxplot() +
  scale_y_continuous(
    limits = c(3500, 5500))
```
:::

### Padding {#sec-coords-pad}
The `expand` and `clip` arguments of `coord_cartesian()` are useful to eliminate padding of the data. To alter the padding or eliminate it for one axis, `scale_x/y_*(expand)` is preferable. You need to be careful in using `clip = "off"` because it can lead to plotted data outside the panel region. However, it is useful to prevent points from being clipped on the limits of the plot.

For more complex adjustment of padding, see @sec-scale-limits-padding.

```{r}
#| label: coords-pad
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = body_mass_g)) + 
  geom_point(aes(color = species)) + 
  coord_cartesian(expand = FALSE,
                  clip = "off") + 
  theme(legend.position = "none")
```

## Linear coordinate systems {#sec-coords-linear}

### Flipped coords {#sec-coords-flipped}
`coord_flip()` is often used with bar plots to make them sideways. This can also be done by placing the variable to be counted on the y axis. `coord_flip()` is more important when fitting a model, which assumes the data is `y ~ x`.

```{r}
#| label: coords-flipped
penguins |> 
  ggplot(aes(x = species)) + 
  geom_bar() + 
  coord_flip()
```

### Fixed coords {#sec-coords-fixed}
`coord_fixed()` fixes the ratio of length on the `x` and `y` axes using the `ratio` argument. The aspect ratio will also be set to ensure that the mapping is maintained regardless of the shape of the output device

## Circular coordinate system {#sec-coords-circular}
With `coord_polar()` `x` and `y` are transformed into angle (`theta`) and radius. Rectangles become arcs. This is shown in the below plots. The expansion of the `x` axis moves the starting point out, while the expansion of the `y` axis ensures that the largest bar does not become a closed donut. See the [lollipop plot example](02-ggplot2-rstudioconf-2022.qmd#sec-rs22-gd-lollipop) from [CÃ©dric Scherer, Graphic Design with ggplot2 at RStudio conf 2022](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) for a more complex example.

```{r}
#| label: coords-polar
penguins |> 
  ggplot(aes(x = species, fill = species)) + 
  geom_bar() + 
  scale_x_discrete(expand = expansion(mult = c(0.5, 0))) + 
  scale_y_continuous(expand = expansion(add = c(0, 10))) + 
  coord_polar(theta = "y")
```
